import time
import config
import sqlite3
import requests
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from telegram import ReplyKeyboardMarkup

__connection = None


def get_connection():
	global __connection
	if __connection is None:
		__connection = sqlite3.connect('anketa.db', check_same_thread = False)
	return __connection


def init_db():
	conn = get_connection()
	c = conn.cursor()
	c.execute(''' CREATE TABLE IF NOT EXISTS user_message(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, time	INTEGER NOT NULL, text	TEXT NOT NULL, status	TEXT)''')
	c.execute(''' CREATE TABLE IF NOT EXISTS users(id	INTEGER PRIMARY KEY NOT NULL,invited_by_id INTEGER NOT NULL, reffed INTEGER NOT NULL, balance INTEGER NOT NULL, wallet	TEXT, vip_until INTEGER NOT NULL, subscr BOOLEAN NOT NULL, has_free INTEGER NOT NULL, id_free_sig INTEGER,agreed_bool INTEGER NOT NULL, free_sigs INTEGER NOT NULL )''')
	c.execute(''' CREATE TABLE IF NOT EXISTS transactions(hash	TEXT NOT NULL)''')
	conn.commit()


def add_message(time, text):
	conn = get_connection()
	cs = conn.cursor()
	cs.execute("INSERT INTO user_message(time, text) VALUES({0}, '{1}')".format(time, text))
	conn.commit()


def send_verdict_to_vips(id, verdict):
	conn = get_connection()
	c = conn.cursor()
	c.execute('SELECT text FROM user_message WHERE id = {0}'.format(id))
	h = c.fetchall()[0][0]
	if verdict == "‚úÖ":
		message = '‚úÖ'.format(h)
	else:
		message = '‚ûñ'.format(h)
	conn = get_connection()
	c = conn.cursor()
	c.execute('SELECT id FROM users WHERE (subscr = 1 AND vip_until > {0}) OR id_free_sig = {1} OR free_sigs>0'.format(time.time(), id - 1))
	h = c.fetchall()
	c.execute('SELECT COUNT(*) FROM user_message')
	cnt = c.fetchall()[0][0] - 1
	for user in h:
		if get_free_type(user[0]) == 1:
			increase_free_type(user[0])
			set_free_sig(user[0], cnt)
		bot.sendMessage(user[0], message)
	bot.sendMessage(config.CHANNEL_NAME, message)


def set_verdict(id, verdict):
	conn = get_connection()
	c = conn.cursor()
	c.execute("UPDATE user_message SET status = '{0}' WHERE id = {1}".format(verdict, id))
	conn.commit()


def is_registrated(id):
	conn = get_connection()
	c = conn.cursor()
	c.execute('SELECT COUNT(*) FROM users WHERE id = {0}'.format(id))
	h = c.fetchall()[0][0]
	return h > 0


def register(message):

	try:
		inviter = int(message.text[7:])
	except:
		inviter = 0
	conn = get_connection()
	c = conn.cursor()
	c.execute(f"INSERT INTO users(id, balance, vip_until, subscr, has_free,reffed,invited_by_id,agreed_bool,free_sigs) VALUES({message.chat_id}, 0, 0, 1, 0,0,{inviter},0,0)")
	conn.commit()
	c.execute("")
	return inviter

def is_with_wallet(id):
	conn = get_connection()
	c = conn.cursor()
	c.execute('SELECT wallet FROM users WHERE id = {0}'.format(id))
	h = c.fetchall()[0][0]
	return h is not None


def get_balance(id):
	conn = get_connection()
	c = conn.cursor()
	c.execute('SELECT balance FROM users WHERE id = {0}'.format(id))
	h = c.fetchall()[0][0]
	return h


def get_wallet(id):
	conn = get_connection()
	c = conn.cursor()
	c.execute('SELECT wallet FROM users WHERE id = {0}'.format(id))
	h = c.fetchall()[0][0]
	return h


def have_this_wallet(wallet):
	conn = get_connection()
	c = conn.cursor()
	c.execute('SELECT COUNT(*) FROM users WHERE wallet = "{0}"'.format(wallet))
	h = c.fetchall()[0][0]
	return h > 0


def top_up(chat_id):
	global bot

	if is_with_wallet(chat_id):
		markup = ReplyKeyboardMarkup([["–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", "–ú–µ–Ω—é"]], resize_keyboard=True)
		bot.sendMessage(chat_id, '–í–∞—à –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: {0}. (–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å "wallet x")\n–í–∞—à –±–∞–ª–∞–Ω—Å {1} $'.format(get_wallet(chat_id), get_balance(chat_id)), reply_markup=markup)
	else:
		markup = ReplyKeyboardMarkup([["–ú–µ–Ω—é"]], resize_keyboard=True)
		bot.sendMessage(chat_id, '–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π.\n–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ "wallet x", –≥–¥–µ x - –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞', reply_markup=markup)


def tie(chat_id, message):
	global bot

	wal = message.split(" ")[1]
	if have_this_wallet(wal):
		bot.sendMessage(chat_id, "–ö—Ç–æ-—Ç–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∞–∫–æ–π –∫–æ—à–µ–ª–µ–∫")
		return
	conn = get_connection()
	c = conn.cursor()
	c.execute("UPDATE users SET wallet = '{0}' WHERE id = {1}".format(wal, chat_id))
	conn.commit()


def is_used_hash(hash):
	conn = get_connection()
	c = conn.cursor()
	c.execute('SELECT COUNT(*) FROM transactions WHERE hash = "{0}"'.format(hash))
	h = c.fetchall()[0][0]
	return h > 0


def add_hash(hash):
	conn = get_connection()
	c = conn.cursor()
	c.execute('INSERT INTO transactions(hash) VALUES("{0}")'.format(hash))
	conn.commit()


def set_balance(id, balance):
	conn = get_connection()
	c = conn.cursor()
	c.execute("UPDATE users SET balance = '{0}' WHERE id = {1}".format(balance, id))
	conn.commit()


def get_rate():
	req = requests.get("https://blockchain.info/ticker").json()["USD"]["15m"]
	return req


def update_balance(id):
	wallet = get_wallet(id)
	url = "https://api.blockcypher.com/v1/btc/main/addrs/" + config.ADMIN_ADDRESS
	req = requests.get(url)
	trans = req.json()["txrefs"]
	addsum = 0
	for tran in trans:
		value = tran["value"]
		hash = tran["tx_hash"]
		date = tran["confirmed"]
		date = time.mktime(time.strptime(date, '%Y-%m-%dT%H:%M:%SZ'))
		if date > time.time() - 60 * 60:
			continue
		if is_used_hash(hash):
			continue
		url_wal = "https://api.blockcypher.com/v1/btc/main/txs/" + hash
		ans = requests.get(url_wal).json()["inputs"][0]["addresses"]
		if len(ans) != 1:
			continue
		if ans[0] == config.ADMIN_ADDRESS:
			continue
		wal = ans[0]
		if wal != wallet:
			continue
		addsum += value
		add_hash(hash)
	now = get_balance(id) + addsum / (10 ** 8) * get_rate()
	set_balance(id, now)


def get_vip(id):
	conn = get_connection()
	c = conn.cursor()
	c.execute('SELECT vip_until FROM users WHERE id = {0}'.format(id))
	h = c.fetchall()[0][0]
	return h


def add_vip(id, days):
	vip_until = max(time.time(), get_vip(id))
	vip_until += days * 24 * 60 * 60
	conn = get_connection()
	c = conn.cursor()
	c.execute("UPDATE users SET vip_until = {0} WHERE id = {1}".format(vip_until, id))
	conn.commit()


def get_free_type(id):
	conn = get_connection()
	c = conn.cursor()
	c.execute('SELECT has_free FROM users WHERE id = {0}'.format(id))
	h = c.fetchall()[0][0]
	return h


def increase_free_type(id):
	conn = get_connection()
	c = conn.cursor()
	c.execute("UPDATE users SET has_free = {0} WHERE id = {1}".format(get_free_type(id) + 1, id))
	conn.commit()


def set_free_sig(id, nom):
	conn = get_connection()
	c = conn.cursor()
	c.execute("UPDATE users SET id_free_sig = {0} WHERE id = {1}".format(nom, id))
	conn.commit()


def send_signal_to_vips(sig):
	print("sent")
	message = "–°–∏–≥–Ω–∞–ª ! \n{0}".format(sig)
	conn = get_connection()
	c = conn.cursor()
	c.execute('SELECT id FROM users WHERE (subscr = 1 AND vip_until > {0}) OR has_free = 1 OR free_sigs>0'.format(time.time()))
	h = c.fetchall()
	c.execute('SELECT COUNT(*) FROM user_message')
	cnt = c.fetchall()[0][0] - 1
	for user in h:

		print(user[0])
		c.execute(f"SELECT free_sigs FROM users WHERE id is {user[0]}")
		free_sigs = int(c.fetchall()[0][0])
		#print("free_sigs:"+free_sigs)

		if get_free_type(user[0]) == 1 or free_sigs>0:
			if free_sigs>0:
				c.execute(f"UPDATE users SET free_sigs=free_sigs-1 WHERE id is {user[0]}")
			else:
				increase_free_type(user[0])
				set_free_sig(user[0], cnt)
		bot.sendMessage(user[0], message)
	bot.sendMessage(config.CHANNEL_NAME, message)


def set_subscr(id, x):
	conn = get_connection()
	c = conn.cursor()
	c.execute("UPDATE users SET subscr = {0} WHERE id = {1}".format(x, id))
	conn.commit()


def main_menu(chat_id):
	global bot

	markup = ReplyKeyboardMarkup([["‚úÖ –ü–æ–ª—É—á–∏—Ç—å –°–∏–≥–Ω–∞–ª", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–∏–≥–Ω–∞–ª–æ–≤"],
								 ["üí∞ –ë–∞–ª–∞–Ω—Å", "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã" ],
								 ["‚úåÔ∏è –û –Ω–∞—Å", "‚òéÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞"]],resize_keyboard=True)

	bot.sendMessage(chat_id, 'Main Menu', reply_markup=markup)


def get_signal_menu(chat_id):
	global bot

	markup = ReplyKeyboardMarkup([["üéÅ  –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª "], ["üìç–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∞—á—É VIP —Å–∏–≥–Ω–∞–ª–æ–≤"],
									["üìç–í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∞—á—É VIP —Å–∏–≥–Ω–∞–ª–æ–≤"], ["–ú–µ–Ω—é"]], resize_keyboard=True)

	bot.sendMessage(chat_id, '–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª.\n –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤—ã –º–æ–≥–ª–∏ \
	–ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å VIP –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã –≤ —Ä–∞–∑–¥–µ–ª–µ  ¬´üí∞ –ë–∞–ª–∞–Ω—Å¬ª\n–¢–∞–∫–∂–µ –≤—ã \
	—Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏–≤–æ–¥—è —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –≤ –±–æ—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \
	—Ä–∞–∑–¥–µ–ª ¬´üë• –†–µ—Ñ–µ—Ä–∞–ª—ã¬ª.', reply_markup=markup)


def balance_menu(chat_id):
	global bot

	markup = ReplyKeyboardMarkup([["üòé –ö—É–ø–∏—Ç—å VIP —Å—Ç–∞—Ç—É—Å", "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "–ú–µ–Ω—é"]], resize_keyboard=True)
	bot.sendMessage(chat_id, '–í–∞—à –±–∞–ª–∞–Ω—Å ' + str(get_balance(chat_id)) + '$', reply_markup=markup)



def ref(chat_id):
	global bot

	bot.sendMessage(chat_id, '–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ - ' + "t.me/RichTraders_bot?start=" + str(chat_id))


def buy_status(chat_id):
	global bot

	markup = ReplyKeyboardMarkup([["1 –Ω–µ–¥–µ–ª—è VIP", "1 –º–µ—Å—è—Ü VIP", "–ú–µ–Ω—é"]], resize_keyboard=True)
	bot.sendMessage(chat_id, 'üòé –ö—É–ø–∏—Ç—å VIP —Å—Ç–∞—Ç—É—Å\n 1 –Ω–µ–¥–µ–ª—è VIP - 25$\n 1–º–µ—Å—è—Ü VIP - 70$', reply_markup=markup)


def vip7(chat_id):
	global bot

	balance = get_balance(chat_id)
	if balance < 25:
		bot.sendMessage(chat_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
	elif balance >= 25:
		balance -= 25
		set_balance(chat_id, balance)
		add_vip(chat_id, 7)
		bot.sendMessage(chat_id, "–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ 7 –¥–Ω–µ–π.\nVIP –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {0}".format(time.ctime(get_vip(chat_id))))
		main_menu(chat_id)
		conn = get_connection()
		cs = conn.cursor()
		cs.execute(f"SELECT invited_by_id FROM users WHERE id is {chat_id}")
		inviter_id = cs.fetchall()[0][0]
		add_vip(inviter_id,1)
		bot.sendMessage(inviter_id,"–û–¥–∏–Ω –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—É–ø–∏–ª vip –ø–æ–¥–ø–∏—Å–∫—É. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –æ–¥–∏–Ω –¥–µ–Ω—å —Å–∏–≥–Ω–∞–ª–æ–≤.")
def vip30(chat_id):
	global bot

	balance = get_balance(chat_id)
	if balance < 70:
		bot.sendMessage(chat_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
	elif balance >= 70:
		balance = balance - 70
		set_balance(chat_id, balance)
		add_vip(chat_id, 30)
		bot.sendMessage(chat_id, "–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ 30 –¥–Ω–µ–π.\nVIP –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {0}".format(time.ctime(get_vip(chat_id))))
		conn = get_connection()
		cs = conn.cursor()
		cs.execute(f"SELECT invited_by_id FROM users WHERE id is {chat_id}")
		inviter_id = cs.fetchall()[0][0]
		add_vip(inviter_id, 1)
		bot.sendMessage(inviter_id,
						"–û–¥–∏–Ω –∏–∑ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—É–ø–∏–ª vip –ø–æ–¥–ø–∏—Å–∫—É. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –æ–¥–∏–Ω –¥–µ–Ω—å —Å–∏–≥–Ω–∞–ª–æ–≤.")

def stat_menu(chat_id):
	global bot

	signal_week = []
	signal_week_stat = []
	signal_moun = []
	signal_moun_stat = []
	week_try = 0
	week_fal = 0
	moun_try = 0
	moun_fal = 0
	i = 0
	conn = get_connection()
	c = conn.cursor()
	c.execute('''SELECT time FROM user_message''')
	vall = c.fetchall()
	for valy in vall:
		val = valy[0]
		if time.time() - val < 30 * 24 * 60 * 60:
			c.execute("SELECT text, status FROM user_message WHERE time = {0}".format(val))
			query = c.fetchall()
			txt = query[0][0]
			stat = query[0][1]
			if time.time() - val < 7 * 24 * 60 * 60:
				signal_week.append(txt)
				signal_week_stat.append(stat)
			signal_moun.append(txt)
			signal_moun_stat.append(stat)
		i += 1
	for sig in signal_week_stat:
		if sig == '‚úÖ':
			moun_try += 1
		else:
			week_fal += 1
	for sig in signal_moun_stat:
		if sig == '‚úÖ':
			week_try += 1
		else:
			moun_fal += 1
	bot.sendMessage(chat_id, '–í –¥–∞–Ω–Ω–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–∞—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤\n\n –ó–∞ –Ω–µ–¥–µ–ª—é:\n ‚úÖ ' +str( week_try) + '\n ‚ûñ ' + str(week_fal) + '\n\n –ó–∞ –º–µ—Å—è—Ü:\n ‚úÖ ' + str(moun_try) + '\n ‚ûñ ' + str(moun_fal))


def sett_menu(chat_id):
	global bot

	bot.sendMessage(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –ø—Ä–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Å —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π!')
	bot.sendMessage(chat_id, 'https://t.me/joinchat/IIs3yh066I6Q65TTpF9G7A')


def start(bott, update):
	global bot

	if not is_registrated(update.message.chat_id):
		reffed = register(update.message)
	if reffed>0:
		bot.sendMessage(update.message.chat_id,"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —á–µ–ª–æ–≤–µ–∫, –Ω–∞–∂–∞–≤ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É:",reply_markup=ReplyKeyboardMarkup([["–ñ–ú–Ø–ö"]], resize_keyboard=True))

	else:
		bot.sendMessage(update.message.chat_id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, —É–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n –ñ–º–∏ –Ω–∞ ‚úÖ–ü–æ–ª—É—á–∏—Ç—å –°–∏–≥–Ω–∞–ª¬ª, \
		—á—Ç–æ–±—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã–¥–∞–ª–∞ —Ç–µ–±–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª. –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö\
		–≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞—à–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å —Å–ø–æ—Å–æ–±–Ω–∞ –≤—ã—á–∏—Å–ª–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∏—Å—Ö–æ–¥ –±–µ–∑ –æ—à–∏–±–æ–∫!\n\n ¬´‚úåÔ∏è–û –Ω–∞c¬ª -\
		 –¢—É—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ –±–ª–∏–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º, —É–∑–Ω–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n \
		 ¬´üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–∏–≥–Ω–∞–ª–æ–≤¬ª - —ç—Ç–æ —Ç–∞–º –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–∏–≥–Ω–∞–ª–∞–º\n\n ¬´üí∞–ë–∞–ª–∞–Ω—Å¬ª - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∞—à–µ–≥–æ \
		 –±–∞–ª–∞–Ω—Å–∞ —Å –ø–æ–º–æ—â—å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å VIP —Å–∏–≥–Ω–∞–ª—ã\n\n ¬´üë•–†–µ—Ñ–µ—Ä–∞–ª—ã¬ª - –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å\
		  –Ω–∞ VIP —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏–≥–ª–∞—à–∞—è —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π\n\n –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –í—ã –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å —Å —Å–∏—Å—Ç–µ–º–æ–π –∏–ª–∏ –∂–µ –Ω–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ \
		  –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –í–∞–º —Ç–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É!')
		main_menu(update.message.chat_id)


def sigh(bott, update):
	global bot

	message = update.message.text
	chat_id = update.message.chat_id
	markup = ReplyKeyboardMarkup([["–ú–µ–Ω—é"]], resize_keyboard=True)

	if not is_registrated(chat_id):
		register(chat_id)
	if message == '–ñ–ú–Ø–ö':

		bot.sendMessage(update.message.chat_id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, —É–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n –ñ–º–∏ –Ω–∞ ‚úÖ–ü–æ–ª—É—á–∏—Ç—å –°–∏–≥–Ω–∞–ª¬ª, \
				—á—Ç–æ–±—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã–¥–∞–ª–∞ —Ç–µ–±–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª. –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö\
				–≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞—à–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å —Å–ø–æ—Å–æ–±–Ω–∞ –≤—ã—á–∏—Å–ª–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∏—Å—Ö–æ–¥ –±–µ–∑ –æ—à–∏–±–æ–∫!\n\n ¬´‚úåÔ∏è–û –Ω–∞c¬ª -\
				 –¢—É—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ –±–ª–∏–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º, —É–∑–Ω–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n \
				 ¬´üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–∏–≥–Ω–∞–ª–æ–≤¬ª - —ç—Ç–æ —Ç–∞–º –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–∏–≥–Ω–∞–ª–∞–º\n\n ¬´üí∞–ë–∞–ª–∞–Ω—Å¬ª - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∞—à–µ–≥–æ \
				 –±–∞–ª–∞–Ω—Å–∞ —Å –ø–æ–º–æ—â—å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å VIP —Å–∏–≥–Ω–∞–ª—ã\n\n ¬´üë•–†–µ—Ñ–µ—Ä–∞–ª—ã¬ª - –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å\
				  –Ω–∞ VIP —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏–≥–ª–∞—à–∞—è —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π\n\n –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –í—ã –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å —Å —Å–∏—Å—Ç–µ–º–æ–π –∏–ª–∏ –∂–µ –Ω–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ \
				  –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –í–∞–º —Ç–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—à—É –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É!')
		main_menu(update.message.chat_id)
		conn = get_connection()
		cs = conn.cursor()

		cs.execute(f"SELECT agreed_bool FROM users WHERE id is {update.message.chat_id}")
		agreed = cs.fetchall()[0][0]

		if agreed>0:
			bot.sendMessage(update.message.chat_id,"–í—ã —É–∂–µ –Ω–∞–∂–∏–º–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ.")
		else:
			cs.execute(f"SELECT invited_by_id FROM users WHERE id is {update.message.chat_id}")
			inviter_id = cs.fetchall()[0][0]
			cs.execute(f"UPDATE users SET reffed = reffed + 1 WHERE id IS {inviter_id}")
			cs.execute(f"SELECT reffed FROM users WHERE id is {inviter_id}")
			total_refs = cs.fetchall()[0][0]
			bot.sendMessage(inviter_id,f"–ü—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –í—Å–µ–≥–æ –∏—Ö —É –≤–∞—Å {total_refs}")

			cs.execute(f"UPDATE users SET agreed_bool = 1 WHERE id IS {update.message.chat_id}")

			if total_refs>=2:
				bot.sendMessage(inviter_id,f"–í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ —Ç—Ä–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

				cs.execute(f"UPDATE users SET free_sigs = free_sigs+3 WHERE id IS {inviter_id}")
				cs.execute(f"UPDATE users SET reffed = reffed-2 WHERE  id IS {inviter_id}")

	if message == '‚úÖ –ü–æ–ª—É—á–∏—Ç—å –°–∏–≥–Ω–∞–ª':
		get_signal_menu(chat_id)

		conn = get_connection()
		cs = conn.cursor()
		cs.execute(f"SELECT free_sigs FROM users WHERE id is {update.message.chat_id}")
		free_signals = cs.fetchall()[0][0]
		print("#")

		vip_days = (get_vip(chat_id)-time.time())
		if vip_days<0:
			vip_days=0
		seconds = vip_days
		seconds_in_day = 60 * 60 * 24
		seconds_in_hour = 60 * 60
		seconds_in_minute = 60
		days = seconds // seconds_in_day
		hours = (seconds - (days * seconds_in_day)) // seconds_in_hour
		minutes = (seconds - (days * seconds_in_day) - (hours * seconds_in_hour)) // seconds_in_minute
		bot.sendMessage(update.message.chat_id,f"–í–∞—à Vip –¥–æ—Å—Ç—É–ø - {int(days)} –¥–Ω–µ–π {int(hours)} —á–∞—Å–æ–≤ {int(minutes)} –º–∏–Ω—É—Ç.\n–î–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ - {free_signals}")
	elif message == 'üéÅ  –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª':
		if get_free_type(chat_id) == 0:
			increase_free_type(chat_id)
			bot.sendMessage(chat_id, '–û–∂–∏–¥–∞–π—Ç–µ, –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –≤–∞–º –ø—Ä–∏–π–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª', reply_markup=markup)
		else:
			bot.sendMessage(chat_id, '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é', reply_markup=markup)

	elif message == 'üìç–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∞—á—É VIP —Å–∏–≥–Ω–∞–ª–æ–≤':
		set_subscr(chat_id, 1)
		bot.sendMessage(chat_id, '–ü–æ–¥–∞—á–∞ VIP —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω—ã')
	elif message == 'üìç–í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–¥–∞—á—É VIP —Å–∏–≥–Ω–∞–ª–æ–≤':
		set_subscr(chat_id, 0)
		bot.sendMessage(chat_id, '–ü–æ–¥–∞—á–∞ VIP —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞')
	elif message == 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
		top_up(chat_id)
	elif len(message) > 7 and message[:6] == "wallet":
		tie(chat_id, message)
		top_up(chat_id)
	elif message == '–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å':
		update_balance(chat_id)
		top_up(chat_id)
	elif message == 'all':
		if chat_id == config.ADMIN_ID:
			conn = get_connection()
			c = conn.cursor()
			c.execute("SELECT id, text, status FROM user_message")
			values = c.fetchall()
			msg = ""
			for value in values:
				msg += str(value[0]) + '. ' + value[1] + ' - ' + ('-' if value[2] is None else value[2]) + '\n'
			bot.sendMessage(chat_id, msg)
			bot.sendMessage(chat_id, '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª–∞ chng –Ω–æ–º–µ—Ä –∏ 0/1')
	elif message == 'üí∞ –ë–∞–ª–∞–Ω—Å':
		balance_menu(chat_id)
	elif message == 'üòé –ö—É–ø–∏—Ç—å VIP —Å—Ç–∞—Ç—É—Å':
		buy_status(chat_id)
	elif message == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–∏–≥–Ω–∞–ª–æ–≤':
		stat_menu(chat_id)
	elif message == '–ú–µ–Ω—é':
		main_menu(chat_id)
	elif message =='‚òéÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
		sett_menu(chat_id)
	elif message == 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã':
		ref(chat_id)
	elif message == "1 –Ω–µ–¥–µ–ª—è VIP":
		vip7(chat_id)
	elif message == "1 –º–µ—Å—è—Ü VIP":
		vip30(chat_id)
	elif len(message) > 4 and message[:3] == "VIP":
		if chat_id == config.ADMIN_ID:
			sig = message[4:]
			tm = time.time()
			add_message(tm, sig)
			bot.sendMessage(chat_id,  '–°–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
			send_signal_to_vips(sig)
	elif len(message) > 5 and message[:4] == "chng":
		if chat_id == config.ADMIN_ID:
			nom = message.split(" ")[1]
			verd = ('‚ûñ' if message.split(" ")[2] == "0" else '‚úÖ')
			set_verdict(nom, verd)
			bot.sendMessage(chat_id,  '–í–µ—Ä–¥–∏–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω')
			send_verdict_to_vips(nom, verd)


def updated(bott, update):
	text = update.edited_message.text
	date = update.edited_message.date
	date = time.mktime(date.timetuple()) + 60 * 60 * config.GMT_HOURS
	if text[:3] != "VIP":
		return
	conn = get_connection()
	c = conn.cursor()
	c.execute('SELECT time FROM user_message')
	h = c.fetchall()
	i = 1
	for each in h:
		if abs(round(each[0]) - date) < config.MAX_DELAY:
			id = i
			break
		i += 1
	if text[-1] == "‚úÖ":
		set_verdict(id, "‚úÖ")
		send_verdict_to_vips(id, "‚úÖ")
		bot.sendMessage(config.ADMIN_ID, '–í–µ—Ä–¥–∏–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ #' + str(id) + ' –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω (‚úÖ)')
	elif text[-1] == "‚ûñ":
		set_verdict(id, "‚ûñ")
		send_verdict_to_vips(id, "‚ûñ")
		bot.sendMessage(config.ADMIN_ID, '–í–µ—Ä–¥–∏–∫—Ç —Å–∏–≥–Ω–∞–ª–∞ #' + str(id) + ' –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω (‚ûñ)')


init_db()
updater = Updater(config.TOKEN, use_context=False)
dp = updater.dispatcher
bot = updater.bot
dp.add_handler(CommandHandler("start", start))
dp.add_handler(MessageHandler(Filters.update.edited_message, updated))
dp.add_handler(MessageHandler(Filters.text, sigh))
updater.start_polling()
